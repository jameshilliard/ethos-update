#!/bin/bash
# ethOS Update Script
# LICENSE AGREEMENT
#
# File Version See $VERSION Variable (c) 2016 Dale Chapman, sling00@gmail.com (“Author”).
#
# By using this file, you agree to the following:
#
# This file has been licensed to gpuShack for the exclusive use and distribution as part of ethOS. All other previous licenses
# of this file have been revoked. This license does not expire and allows for any modification, distribution, and/or derivative work
# by gpuShack and by the Author. This license extends to gpuShack’s owners, operators, officers, and contractors, where
# applicable.
#
# The Author expressly forbids and revokes usage of this file, as well as any previous iterations of this file, in any
# operating system other than ethOS. Any fork of ethOS, third party or otherwise, may not use this file without express written
# permission from the Author.
#
# Personal Use
#
# End users may modify and use this script for personal use, but may not redistribute or include in a larger work, in whole, or
# in part, without express written permission from the Author.
#
# Version History
#
# v1.x - EthOS Release
# v.1 - Development Release
#
# Portions derived from previous work by Author
#
# Red Goat License (v) 1.0
#
# This file is released under the "Small Goat with Red Eyes" license. Breaking the above license agreement will result in a
# small goat with red eyes visiting you while you sleep.
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root, please rerun as \"sudo ethos-update\"" 
   exit 1
fi
UPDATESERVER="http://get.ethosdistro.com/ethos-updates/"
DEVELOPMENT="0"
function DATE() {
      echo `date -u`
}
LOG="/var/log/ethos-update.log"
CURLARGS="-f -s -S -k"
SCRIPT_NEW_VERSION="$(curl $CURLARGS http://get.ethosdistro.com/ethos-updates/version/version)"
SCRIPT_VERSION="1.50"
RELEASEVERSION="1.0.7"
DEVELOPVERSION="1.1.0"
DEVELOPVERSION_SUFFIX="b3"
ETHOSVERSION=$(grep -Poi "(\d+\.\d+\.\d+)" /opt/ethos/etc/version)
HOSTNAME=`cat /etc/hostname`
if [ $ETHOSVERSION = "1.0" ]; then
  CONF="/home/ethos/local"
else
  CONF="/home/ethos/local.conf"
fi
#UPDATEATITWEAK="0"
#UPDATEGRUB="0"
#UPDATEINITRAMFS="0"
#UPDATEPROXY="0"

echo "$(DATE) - ethOS update on $HOSTNAME starting..."
echo "$(DATE) - ethOS update on $HOSTNAME starting..." > /var/log/ethos-update.log
BRANCH=$(grep -Po "(?<=^branch."$HOSTNAME".)(.*)" "$CONF" | xargs)
if [ -z "$BRANCH" ]; then
  BRANCH=`grep -Po "(?<=^globalbranch.)(.*)" "$CONF" | xargs`
fi
if [ -z "$BRANCH" ]; then
  BRANCH="release"
fi
if [ "$BRANCH" = "development" ]; then
  NEWVERSION="$DEVELOPVERSION"
  NEWVERSION_NUMBER="$DEVELOPVERSION$DEVELOPVERSION_SUFFIX"
else 
  NEWVERSION="$RELEASEVERSION"
  NEWVERSION_NUMBER="$RELEASEVERSION"
fi

if [ $DEVELOPMENT = "0" ] ; then
  exec 1>>/var/log/ethos-update.log
  exec 2>>/var/log/ethos-update.log
fi
function f.function_exists() {
    echo "checking for function $1"
    declare -f -F $1 > /dev/null
    return $?
}

function f.updatescript() {
    echo "Checking if ethos-update is up to date........"
  if [ $SCRIPT_NEW_VERSION \> $SCRIPT_VERSION ]; then
    echo "Getting latest version of ethos-update"
    wget http://get.ethosdistro.com/ethos-updates/ethos-update/ethos-update.tar.gz -O /tmp/ethos-update.tar.gz
    if [ $? -eq "0" ]; then
      rm -rf /tmp/ethos-update/
      mkdir -p /tmp/ethos-update/
      tar xpf /tmp/ethos-update.tar.gz -C /tmp/ethos-update/
      if [ $? -eq "0" ]; then
#       BASE=`ls /tmp/ethos-update/`
        rm -rf /opt/ethos-update/*
        mv /tmp/ethos-update/ethos-update/* /opt/ethos-update/
        echo "Updated to latest version, relaunching."
        rm /tmp/ethos-update.tar.gz
        rm -rf /tmp/ethos-update/
        cd ~
        exec /opt/ethos-update/ethos-update
      else
        echo "Failed to extract etho-update tarball. Rerun script to try again."
      fi
    else 
      echo "Failed to download update from repo, try again in a few minutes."
      exit 0
    fi
  else 
    echo "Script up to date"
  fi
}

function f.latest() {
  if [ "$BRANCH" = "release" ]; then 
  chown -R ethos.ethos /home/ethos
  cp /opt/ethos-update/updates/1.0.7/opt/ethos/lib/MinerProcess.php /opt/ethos/lib/MinerProcess.php
        exec 1>/dev/tty
  exec 2>/dev/tty
  echo "$(DATE) Your version of ethOS is up to date. Version: $ETHOSVERSION"  
    else
    echo "$(DATE) Installing latest development build $DEVELOPVERSION$DEVELOPVERSION_SUFFIX."
    f.do-update
  fi
}

  
function f.latest-develop() {
  exec 1>/dev/tty
  exec 2>/dev/tty
  echo "$(DATE) Your version of ethOS is up to date. Version: $ETHOSVERSION"  
}

function f.prerun() {
  /bin/rm -rf /var/log/upstart/*
  /bin/rm -f /var/log/*.gz /var/log/*.log /var/log/*.1 /var/log/*.2
  
  echo "Cleaned up log files"
  echo "$(DATE) Running Pre-Update Commands"
  echo "$ETHOSVERSION" > /opt/ethos/etc/oldversion
  BASE="/opt/ethos-update/updates/$NEWVERSION"
  exec 1>/dev/tty
  exec 2>/dev/tty
  echo "$(DATE) Updating ethos to version $NEWVERSION, May take up to $TIMEREQUIRED minutes depending on your connection speed. You can log in on another session and type tail -f /var/log/ethos-update.log to view progress"
  if [ $DEVELOPMENT = "0" ] ; then
    exec 1>>/var/log/ethos-update.log
    exec 2>>/var/log/ethos-update.log
  fi
  ALLOWED=`cat /opt/ethos/etc/allow.file`
  echo "$(DATE) Disallowing and stopping mining during the update process..."
  /opt/ethos/bin/disallow
  /opt/ethos/bin/minestop
  sleep 5
  ethminer=$(pgrep ethminer | wc -l)
  if [ "$ethminer" -ge "1" ]; then
   exec 1>/dev/tty
   exec 2>/dev/tty
   echo "Unable to terminate mining processes, update cannot continue"
   echo "Reboot system and try again."
   exit 1
  fi
  /usr/bin/dpkg --configure -a


}
function f.copycorefiles() {
        shopt -s globstar;shopt -s dotglob;cd "$BASE";FILES=( `echo **` )
        for f in "${FILES[@]}"; do
                  if [ -d "$f" ];then
                #echo "check if DIR $f exists"
                mkdir -p "/$f"
        fi
      done
        for f in "${FILES[@]}"; do
        if [ -f "$f" ];then
                #echo "copy file $f to /$f"
                cp "$BASE/$f" "/$f"
        fi
        done
        if [ "$ETHOSVERSION" = "1.0|1.0.1|1.0.2|1.0.3" ]; then
      cp /usr/share/zoneinfo/UTC /etc/localtime
    fi
  if [ ! -d "/var/lib/dkms/alx" ]; then
        git clone https://github.com/jeremyb31/alx.git /tmp/alx
        dkms add /tmp/alx
        dkms build alx/2.0
        dkms install alx/2.0
        rm -rf /tmp/alx
  fi
}
function f.createfglrxskel() {
  FGLRX=$(lsmod | grep -c fglrx)
  AMDGPU=$(lsmod | grep -c amdgpu)
  NVIDIA=$(lsmod | grep -c nvidia)
  if [ "$FGLRX" -ge "1" ];then
    DRIVER="fglrx"
  elif [ "$AMDGPU" -ge "1" ];then
    DRIVER="amdgpu"
  elif [ "$NVIDIA" -ge "1" ];then
    DRIVER="nvidia"
  else
    echo "Unable to determine which driver is in use, falling back to fglrx" >> /var/run/ethos-log.file
    DRIVER="fglrx"
  fi
  if [ "$DRIVER" = "fglrx" ];then
    service lightdm stop
    PREFIX="/opt/driver-switching/fglrx"
    DIRS=( usr/lib/fglrx/xorg/modules/extensions/fglrx usr/lib/fglrx/xorg/modules/drivers usr/lib/fglrx/xorg/modules/linux usr/lib32 usr/lib/dri usr/lib/xorg usr/lib/x86_64-linux-gnu\
           lib/fglrx usr/share/polkit-1/actions usr/share/lintian/overrides usr/lib/fglrx-core etc/ati usr/share/ati/lib64 etc/init.d usr/sbin usr/bin usr/lib/pxpress/xorg/modules )
    for f in "${DIRS[@]}";do
      if [ -d "/$f" ];then
        #echo "create DIR $PREFIX/$f "
        mkdir -p "$PREFIX/$f"
      fi
    done
    files=( /usr/lib/libAMDXvBA.so.1 /usr/lib/libXvBAW.so.1 /usr/lib/libfglrx_dm.so.1 /usr/bin/aticonfig /usr/bin/atiode /usr/bin/fgl_glxgears /usr/bin/fglrxinfo\
            /usr/lib/libXvBAW.so.1.0 /usr/lib/dri/fglrx_dri.so /usr/lib/pxpress/xorg/modules/amdxmm.so /usr/lib/pxpress/xorg/modules/drivers /usr/lib/pxpress/xorg/modules/glesx.so \
            /usr/lib/pxpress/xorg/modules/linux /usr/lib/libamdocl64.so /usr/lib/libAMDXvBA.cap /usr/lib/libAMDXvBA.so.1.0 /usr/lib/libatiuki.so.1.0 /usr/lib/libGLEW.a /usr/lib/libglut.a\
            /usr/lib/libGLEW.so /usr/lib/libglut.so /usr/lib/libamdocl12cl64.so /usr/lib/libamdoclcl64.so /usr/lib/libAMDXvBA.so.1 /usr/lib/libatiuki.so.1 /usr/lib/x86_64-linux-gnu/libOpenCL.so\
            /usr/lib/x86_64-linux-gnu/libOpenCL.so.1 /usr/lib/x86_64-linux-gnu/libOpenCL.so.1.0.0 /usr/bin/amdconfig /usr/sbin/atieventsd /usr/sbin/amdnotifyui\
            /etc/init.d/atieventsd /usr/lib32/libAMDXvBA.so.1.0 /usr/lib/fglrx/10fglrx /usr/lib/fglrx/alt_ld.so.conf /usr/lib/fglrx/ld.so.conf /usr/lib/fglrx/libGL.so.1 /usr/lib/fglrx/libGL.so.1.2\
            /usr/lib/fglrx/switchlibGL /usr/lib/fglrx/switchlibglx /usr/lib/fglrx/xorg/modules /usr/lib/fglrx/xorg/modules/amdxmm.so /fglrx/etc/init.d/atieventsd /usr/share/lintian/overrides/fglrx-updates\
            /usr/lib/fglrx/xorg/modules/drivers/fglrx_drv.so /usr/lib/fglrx/xorg/modules/extensions/libglx.so /usr/lib/fglrx/xorg/modules/glesx.so /usr/lib/fglrx/xorg/modules/linux/libfglrxdrm.so\
            /usr/share/ati/lib64/libQtCore.so.4 /usr/share/ati/lib64/libQtGui.so.4 /etc/ati/amdpcsdb /etc/ati/amdpcsdb.default /etc/ati/atiapfxx.blb /etc/ati/atiapfxx.log /etc/ati/control\
            /usr/lib/fglrx-core/ld.so.conf /usr/lib/fglrx-core/unblacklist_ld.so.conf /lib/fglrx/core-modprobe.conf /usr/lib32/libatiuki.so.1 /usr/lib/libatiuki.so.1 /usr/share/lintian/overrides/fglrx-amdcccle-updates\
            /usr/share/polkit-1/actions/com.ubuntu.amdcccle.pkexec.policy /usr/share/fglrx )

    for f in "${files[@]}";do
      if [ -e "$f" ];then
        #echo "copy file $f to $PREFIX$f"
        cp -r "$f" "$PREFIX$f"
      fi
    done
  fi
}

function f.setpermissions() {
    chown -R ethos.ethos /home/ethos
    chown -R root.root /etc/init/ethos-*
    chown root.root /usr/share/initramfs-tools/scripts/init-top/gpulist
    chmod 755 /usr/share/initramfs-tools/scripts/init-top/gpulist
    chmod 0644 /home/ethos/.bashrc
    chown root.root /root/.bashrc
    chmod 0644 /root/.bashrc
    chown root.root /root/.profile
    chown -R ethos.ethos /opt/eth-proxy
}
function f.1.0-extra-installs() {
  mv /home/ethos/remote /home/ethos/remote.conf
  mv /home/ethos/local /home/ethos/local.conf
  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 437D05B5 3E5C1192
#Install new ati drivers
  /usr/bin/apt-get -qq update
  /usr/bin/apt-get -fy install dos2unix nitrogen tmux mc nload xfce4-terminal
  /usr/bin/apt-get --only-upgrade -yo Dpkg::Options::="--force-confnew" install \
    base-files bind9-host ca-certificates cpio cpp-4.8 dnsutils eog \
    fglrx-amdcccle-updates fglrx-updates fglrx-updates-core g++-4.8 gcc-4.8 \
    gcc-4.8-base gir1.2-ibus-1.0 glib-networking glib-networking-common \
    glib-networking-services ibus ibus-gtk ibus-gtk3 ifupdown initscripts \
    libasan0 libatomic1 libbind9-90 libc-bin libc-dev-bin libc6 libc6-dbg \
    libc6-dev libc6-i386 libdns100 libgcc-4.8-dev libgcrypt11 \
    libgcrypt11-dev libgnutls-dev libgnutls-openssl27 libgnutls26 libgnutlsxx27 \
    libgomp1 libgraphite2-3 libgtk2.0-0 libgtk2.0-bin libgtk2.0-common \
    libgudev-1.0-0 libibus-1.0-5 libisc95 libisccc90 libisccfg90 libitm1 \
    libjasper1 liblwres90 libnettle4 libnss3 libnss3-nssdb libnuma1 \
    libpam-systemd libpci-dev libpci3 libpixman-1-0 libquadmath0 libssh-4 \
    libssl-dev libssl-doc libssl1.0.0 libstdc++-4.8-dev libstdc++6 \
    libsystemd-daemon0 libsystemd-journal0 libsystemd-login0 libtsan0 libudev1 \
    linux-libc-dev login multiarch-support ntpdate openssh-client openssh-server \
    openssh-sftp-server openssl passwd pciutils perl perl-base perl-modules \
    pm-utils python-ibus ssh-askpass-gnome systemd-services sysv-rc \
    sysvinit-utils thermald udev usbutils 
}
function f.1.0.6-extra-files() {
  if [ ! -f "/usr/bin/hexchat" ]; then
    /usr/bin/apt-get -qq update
    /usr/bin/apt-get -fy install hexchat 
    rm -f /usr/share/xfce4/helpers/firefox.desktop
  fi
}
function f.1.0.7-extra-files() {
  sed -i '/^deb http\:\/\/llvm.org\/apt\/trusty\/ llvm-toolchain-trusty-3.7 main/d' /etc/apt/sources.list
  sed -i '/^# deb-src http\:\/\/llvm.org\/apt\/trusty\/ llvm-toolchain-trusty-3.7 main/d' /etc/apt/sources.list
  /usr/bin/apt-get update
  rm -f /opt/ethos/bin/info.php
  rm -f /usr/share/xfce4/helpers/firefox.desktop
  /usr/bin/apt-get -fy remove libethereum
  /usr/bin/apt-get -fy install xscreensaver-data-extra midori wmctrl rxvt-unicode
  if [ ! -f "/usr/bin/irssi" ]; then
    /usr/bin/apt-get -qq update
    /usr/bin/apt-get -fy install irssi
    rm -f /usr/share/xfce4/helpers/firefox.desktop
  fi
}
function f.1.1.0-extra-files() {
  sed -i '/^deb http\:\/\/llvm.org\/apt\/trusty\/ llvm-toolchain-trusty-3.7 main/d' /etc/apt/sources.list
  sed -i '/^# deb-src http\:\/\/llvm.org\/apt\/trusty\/ llvm-toolchain-trusty-3.7 main/d' /etc/apt/sources.list
  wget http://get2.ethosdistro.com/packages/fglrx-patches.tar.xz -O /tmp/fglrx-patches.tar.xz
  if [ $? = "0" ];then
    tar xf /tmp/fglrx-patches.tar.xz -C /
  else
    echo "Download of kernel patches failed, please check your connection and try again."
    exit 1
  fi
  SERVER="http://get2.ethosdistro.com/sources/kernel"
  files=("linux-headers-4.4.0-31_4.4.0-31.50~14.04.1_all.deb" "linux-headers-4.4.0-31-generic_4.4.0-31.50-14.04.1_amd64.deb" "linux-image-4.4.0-31-generic_4.4.0-31.50-14.04.1_amd64.deb" "linux-image-extra-4.4.0-31-generic_4.4.0-31.50-14.04.1_amd64.deb")
  mkdir -p "/tmp/kernel"
  for file in "${files[@]}";do
    wget -q --progress=bar:force $SERVER/$file -O /tmp/kernel/$file
    if [ "$?" = "0" ];then
      sudo dpkg -i /tmp/kernel/$file
    else
      echo "Download of kernel 4.4 installation files failed, please check your connection and try again."
      exit 1
    fi
  done
  usermod -a -G video ethos
  usermod -a -G root ethos

SERVER="http://get2.ethosdistro.com/packages/1.1.0/amdgpu-packages"
files=( amdgpu-pro_16.30.3-306809-ethos1_amd64.deb amdgpu-pro-clinfo_16.30.3-306809-ethos1_amd64.deb amdgpu-pro-computing_16.30.3-306809-ethos1_amd64.deb amdgpu-pro-core_16.30.3-306809-ethos1_amd64.deb\
 amdgpu-pro-dkms_16.30.3-306809_all.deb amdgpu-pro-firmware_16.30.3-306809_amd64.deb amdgpu-pro-graphics_16.30.3-306809-ethos1_amd64.deb amdgpu-pro-libopencl1_16.30.3-306809-ethos1_amd64.deb\
  amdgpu-pro-libopencl-dev_16.30.3-306809-ethos1_amd64.deb amdgpu-pro-opencl-icd_16.30.3-306809-ethos1_amd64.deb amdgpu-pro-vulkan-driver_16.30.3-306809-ethos1_amd64.deb\
   libdrm2-amdgpu-pro_16.30.3-306809-ethos1_amd64.deb libdrm-amdgpu-pro-amdgpu1_16.30.3-306809-ethos1_amd64.deb libdrm-amdgpu-pro-dev_16.30.3-306809-ethos1_amd64.deb\
    libdrm-amdgpu-pro-tools_16.30.3-306809-ethos1_amd64.deb libegl1-amdgpu-pro_16.30.3-306809-ethos1_amd64.deb libegl1-amdgpu-pro-dev_16.30.3-306809-ethos1_amd64.deb\
     libgbm1-amdgpu-pro_16.30.3-306809-ethos1_amd64.deb libgbm-amdgpu-pro-dev_16.30.3-306809-ethos1_amd64.deb libgl1-amdgpu-pro-dev_16.30.3-306809-ethos1_amd64.deb\
      libgl1-amdgpu-pro-dri_16.30.3-306809-ethos1_amd64.deb libgl1-amdgpu-pro-glx_16.30.3-306809-ethos1_amd64.deb libgles2-amdgpu-pro_16.30.3-306809-ethos1_amd64.deb\
       libgles2-amdgpu-pro-dev_16.30.3-306809-ethos1_amd64.deb libvdpau-amdgpu-pro_16.30.3-306809-ethos1_amd64.deb xserver-xorg-video-amdgpu-pro_16.30.3-306809-ethos1_amd64.deb )

OUTDIR="/opt/driver-switching/amdgpu-packages/"
if [ ! -d "$OUTDIR" ]; then
mkdir -p "$OUTDIR"
fi
for file in "${files[@]}";do
  if [ ! -e "$OUTDIR$file" ]; then
    wget -q --progress=bar:force $SERVER/$file -O $OUTDIR$file
    if [ "$?" != "0" ];then
      echo "Download of AMDGPU-Pro packages failed, Check your connection and try again."
      exit 1
    fi
  fi
done
for file in "${files[@]}";do
    dpkg -i $OUTDIR$file
    if [ "$?" != "0" ]; then
      echo "Installation of Package $file failed, possibly corrupted file\n run \"sudo rm $OUTDIR$file\" and rerun updater to try again."
    fi
done   
wget http://get2.ethosdistro.com/packages/1.1.0/amdgpu-ethos-extras.tar.xz -O /tmp/amdgpu-ethos-extras.tar.xz
if [ $? = "0" ];then
  tar xf /tmp/amdgpu-ethos-extras.tar.xz -C /opt/driver-switching/amdgpu/
else 
  echo "Download of amdgpu-ethos-extras failed. Check your connection and try again."
  exit 1
fi
  /usr/bin/apt-get update
  rm -f /opt/ethos/bin/info.php
  rm -f /usr/share/xfce4/helpers/firefox.desktop
  /usr/bin/apt-get -fy remove libethereum
  /usr/bin/apt-get -fy install xscreensaver-data-extra midori wmctrl rxvt-unicode
  if [ ! -f "/usr/bin/irssi" ]; then
    /usr/bin/apt-get -fy install irssi
    rm -f /usr/share/xfce4/helpers/firefox.desktop
  fi
    if [ ! -f "/usr/bin/hexchat" ]; then
    /usr/bin/apt-get -fy install hexchat 
    rm -f /usr/share/xfce4/helpers/firefox.desktop
  fi
  f.createfglrxskel
} 
function f.postrun() {
  rm /home/ethos/eth-proxy.pid
  echo "$(DATE) Running Post-Update Commands"
  f.setpermissions
  echo "$NEWVERSION_NUMBER" > /opt/ethos/etc/version
  /bin/rm -f /home/ethos/.ethash/full*
  if [ ! -f "/opt/ethos/etc/allow.file" ]; then
    echo "0" > /opt/ethos/etc/allow.file
  fi
  /usr/sbin/update-initramfs -u
  #Temporarily always update grub until better logic is written.
  #if [ "$UPDATEGRUB" -eq "1" ];then
  /usr/sbin/update-grub
  #fi

#Update The Proxy
    killall -9 python
        rm -rf /opt/eth-proxy
        mkdir -p /opt/eth-proxy
        tar xjpf /opt/ethos-update/proxy-updates/$NEWVERSION/eth-proxy.tar.bz2 -C /opt/
        chown -R ethos.ethos /opt/eth-proxy
        #kill it again.
        rm /home/ethos/eth-proxy.pid 
        
#Check if the reboot.file exists and if not create it.
  if [ ! -f /opt/ethos/etc/reboot.file ];then
    touch /opt/ethos/etc/reboot.file
    chmod 664 /opt/ethos/etc/reboot.file
  fi
#cleanup
  DEPRECATED=( "/opt/ethos/bin/misc-crons.sh" "/var/spool/cron/crontabs/root" "/opt/ethos/bin/check-readonly.sh" "/opt/ethos/bin/minertimer" "/opt/ethos/sbin/ethos-fan-daemon" "/home/ethos/.config/autostart/ethos-fan-daemon.desktop" "/opt/ethos/bin/atitweak" "/opt/ethos/bin/minertimer" "/opt/ethos/bin/mine" "/var/log/ethosupdate.log" "/usr/local/bin/helpme" "/opt/ethos/lib/send.php" "/opt/ethos/bin/update.php" "/opt/ethos/etc/motdpart" "/etc/conky/conky.conf" "/etc/conky/conky_no_x11.conf" " /home/ethos/.config/autostart/ethos-custom.desktop")
  for f in "${DEPRECATED[@]}"; do
        if [ -f "$f" ];then
                rm -f "$f"
        fi
    done
  if [ ! "`readlink /opt/ethos/bin/log`" -ef "/opt/ethos/bin/show" ];then
    rm -f /opt/ethos/bin/log
    ln -s /opt/ethos/bin/show /opt/ethos/bin/log
  fi
  if [ ! "`readlink /opt/ethos/bin/allow`" -ef "/opt/ethos/bin/minestart" ];then
    rm -f /opt/ethos/bin/minestart
    ln -s /opt/ethos/bin/allow /opt/ethos/bin/minestart
  fi
  if [ ! "`readlink /usr/local/bin/apt-get-ubuntu`" -ef "/usr/bin/apt-get" ];then
      ln -s /usr/bin/apt-get /usr/local/bin/apt-get-ubuntu
  fi
  #touch /opt/ethos/etc/.iommufixed
  rm -rf /var/cache/apt-xapian-index/*
  rm -rf /var/backups/*
  rm -rf /var/cache/apt/*
  if [ "$ALLOWED" -eq "0" ]; then
    echo "0" > /opt/ethos/etc/allow.file
    echo "$(DATE) - Mining Disallowed before script start, keeping it that way."
  else
    echo "1" > /opt/ethos/etc/allow.file
    echo "$(DATE) - Mining Allowed before script start, keeping it that way."
  fi
  exec 1>/dev/tty
  exec 2>/dev/tty
  sync
  sleep 10
  echo "$(DATE) - ethOS Update on $HOSTNAME Finished, please reboot. see /var/log/ethos-update.log for details about what was updated."
  exit 0
}



function f.do-update(){
    f.prerun
    if [ "$ETHOSVERSION" = "1.0" ];then
      f.1.0-extra-installs
    fi
    if f.function_exists "f.$NEWVERSION-extra-files"; then
      f.$NEWVERSION-extra-files
    fi
    f.copycorefiles
    f.postrun
}

if [ ! -z "$1" ]; then
  case "$1" in
    reupdate )
    OLDVERSION=`cat /opt/ethos/etc/oldversion`
    if [ -z "$OLDVERSION" ]; then 
      ETHOSVERSION="1.0.5"
    else
      ETHOSVERSION="$OLDVERSION"
    fi
    ;;
    * )
    echo "Invalid commandline argument \"$1\"."
    echo "Usage:"
    echo "\"sudo ethos-update\" - Update to latest ethos version"
    echo "\"sudo ethos-update reupdate\" - Reapply most recent update." 
    exit 0
    ;;
  esac
else
  if [ "$ETHOSVERSION" \> "$RELEASEVERSION" ]; then
    ETHOSVERSION="dev"
  fi
fi

f.updatescript

case $ETHOSVERSION in
  1.0 | 1.0.1 )
  TIMEREQUIRED="30"
  f.do-update
  ;;
  1.0.2 | 1.0.3 )
  TIMEREQUIRED="10"
  f.do-update
  ;;
  1.0.4 | 1.0.5 | 1.0.6 )
  TIMEREQUIRED="5"
  f.do-update
  ;;
  1.0.7 | dev )
  TIMEREQUIRED="20"
  f.latest
  ;;
  
esac



